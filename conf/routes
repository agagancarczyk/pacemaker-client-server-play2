# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                                                      controllers.Accounts.login()
GET     /users/:userId/index                                   controllers.Application.index(userId : Long)

POST    /authenticate          							       controllers.Accounts.authenticate()
GET     /logout												   controllers.Accounts.logout()
GET     /signup                                                controllers.Accounts.signup()
POST    /users/createUser                                      controllers.Accounts.createUser()

GET     /users/:userId/friends                                 controllers.Friendships.friends(userId : Long)
POST 	/users/:userId/friends/addFriend/:targetUserId		   controllers.Friendships.addFriend(userId : Long, targetUserId : Long)
POST 	/users/:userId/friends/removeFriend/:targetUserId	   controllers.Friendships.removeFriend(userId : Long, targetUserId : Long)

GET     /postactivity                                          controllers.Activities.newActivity()
GET     /users/:userId/activities                              controllers.Activities.activities(userId : Long)
POST    /users/:userId/activities	                           controllers.Activities.uploadActivity(userId : Long)
GET     /users/:userId/activities/:activityId                  controllers.Activities.showActivity(userId : Long, activityId : Long)

GET     /users/:userId/reports/:category                       controllers.Reports.reports(userId : Long, category : String)
GET		/users/:userId/reports/distance/:category			   controllers.Reports.distance(userId : Long, category : String)
GET		/users/:userId/reports/duration/:category			   controllers.Reports.duration(userId : Long, category : String)
GET     /users/:userId/reports/caloriesBurned/:category        controllers.Reports.caloriesBurned(userId : Long, category : String)


# Users
GET     /api/:token/:userId/users                              controllers.PacemakerAPI.users(token : String, userId: Long)
DELETE  /api/:token/:userId/users                              controllers.PacemakerAPI.deleteAllUsers(token : String, userId: Long)
POST    /api/users                                             controllers.PacemakerAPI.createUser()

GET     /api/:token/:userId/users/:id                          controllers.PacemakerAPI.user(token : String, userId: Long, id: Long)
DELETE  /api/:token/users/:id                                  controllers.PacemakerAPI.deleteUser(token : String, id: Long)
PUT     /api/:token/users/:id                                  controllers.PacemakerAPI.updateUser(token : String, id: Long)

POST	/api/:token/users/generateToken/:email				   controllers.PacemakerAPI.generateToken(token: String, email: String)

# Activities
GET     /api/:token/users/:userId/activities                   controllers.PacemakerAPI.activities(token : String, userId: Long)
POST    /api/:token/users/:userId/activities                   controllers.PacemakerAPI.createActivity(token : String, userId: Long)

GET     /api/:token/users/:userId/activities/:activityId       controllers.PacemakerAPI.activity(token : String, userId: Long, activityId:Long)
DELETE  /api/:token/users/:userId/activities/:activityId       controllers.PacemakerAPI.deleteActivity(token : String, userId: Long, activityId:Long)
PUT     /api/:token/users/:userId/activities/:activityId       controllers.PacemakerAPI.updateActivity(token : String, userId: Long, activityId:Long)

# Locations
GET     /api/:token/activities/:activityId/locations           controllers.PacemakerAPI.locations(token : String, activityId: Long)
POST    /api/:token/activities/:activityId/locations           controllers.PacemakerAPI.createLocation(token : String, activityId: Long)

GET     /api/:token/activities/:activityId/locations/:locationId      controllers.PacemakerAPI.location(token : String, activityId: Long, locationId: Long)
DELETE  /api/:token/activities/:activityId/locations/:locationId      controllers.PacemakerAPI.deleteLocation(token : String, activityId:Long, locationId: Long)
PUT     /api/:token/activities/:activityId/locations/:locationId      controllers.PacemakerAPI.updateLocation(token : String, activityId:Long, locationId: Long)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
